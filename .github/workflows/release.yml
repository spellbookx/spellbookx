name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  id-token: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies and global Nx CLI
        run: |
          pnpm install --frozen-lockfile
          pnpm add -g nx
          # Install jq for JSON parsing if not already present on runner
          sudo apt-get update && sudo apt-get install -y jq

      - name: Setup Git user
        run: |
          git config user.name "Davide Di Criscito"
          git config user.email "davide.dicriscito@gmail.com"

      - uses: nrwl/nx-set-shas@v4

      - name: Restore missing Git tags from npmjs
        id: restore_tags
        run: |
          MISSING_GIT_TAGS_TO_PUSH=""

          # Find all package.json files that could correspond to publishable projects.
          # Adjust the find path if your publishable projects are not consistently under 'libs/' or 'apps/'.
          for pkg_json_path in $(find . -name package.json -not -path "*/node_modules/*" -not -path "*/dist/*"); do
            # Attempt to read name and version
            PACKAGE_NAME=$(jq -r '.name // empty' "$pkg_json_path")
            PACKAGE_VERSION=$(jq -r '.version // empty' "$pkg_json_path")

            if [[ -z "$PACKAGE_NAME" || -z "$PACKAGE_VERSION" || "$PACKAGE_NAME" == "null" || "$PACKAGE_VERSION" == "null" ]]; then
              continue # Skip if name or version are not found
            fi

            TAG_NAME="${PACKAGE_NAME}@${PACKAGE_VERSION}"

            # Check if tag exists locally in Git
            if ! git tag -l | grep -q "^${TAG_NAME}$"; then
              # Tag does not exist locally in Git, now check npmjs
              echo "Tag ${TAG_NAME} not found locally in Git. Checking npmjs..."

              # Check if this exact version exists on npmjs
              # Using npm view <package> versions --json to reliably get all published versions
              NPM_VERSIONS=$(npm view "$PACKAGE_NAME" versions --json 2>/dev/null || echo "[]")

              if echo "$NPM_VERSIONS" | jq -e ".[] == \"$PACKAGE_VERSION\"" > /dev/null; then
                echo "Found ${TAG_NAME} on npmjs but not in Git. Will create and push tag."
                MISSING_GIT_TAGS_TO_PUSH="$MISSING_GIT_TAGS_TO_PUSH $TAG_NAME"
              else
                echo "Tag ${TAG_NAME} not found on npmjs either. No action needed for this tag."
              fi
            else
              echo "Tag ${TAG_NAME} already exists locally in Git. Skipping."
            fi
          done

          # Create and push missing tags
          if [[ -n "$MISSING_GIT_TAGS_TO_PUSH" ]]; then
            echo "--- Pushing missing Git tags found on npmjs ---"
            for tag in $MISSING_GIT_TAGS_TO_PUSH; do
              echo "Creating local Git tag: $tag"
              git tag "$tag"
              echo "Pushing $tag to origin."
              git push origin "$tag" || { echo "Failed to push tag $tag. Continuing with other tags."; }
            done
            echo "--- Finished pushing missing Git tags ---"
          else
            echo "No missing Git tags found that exist on npmjs."
          fi

          # This step sets no outputs as it directly performs git operations.

      - name: Determine projects to release
        id: determine_projects
        run: |
          changed_projects=$(nx show projects --affected --base=main~1 --head=main)

          publishable_projects=""

          for project in $changed_projects; do
            # Validate if project is a directory before attempting to read project.json
            if [ ! -d "libs/$project" ] && [ ! -d "apps/$project" ]; then
              echo "Warning: Directory for project $project not found. Skipping."
              continue
            fi

            PROJECT_JSON_PATH=""
            if [ -f "libs/$project/project.json" ]; then
              PROJECT_JSON_PATH="libs/$project/project.json"
            elif [ -f "apps/$project/project.json" ]; then
              PROJECT_JSON_PATH="apps/$project/project.json"
            fi

            if [[ -z "$PROJECT_JSON_PATH" ]]; then
              echo "Warning: project.json not found for project $project. Skipping publishability check."
              continue
            fi

            # Check if project has a 'build' target and is explicitly marked as publishable (e.g., via a tag)
            # Or if it's a library type by default.
            if jq -e '.targets.build' "$PROJECT_JSON_PATH" >/dev/null 2>&1; then
              PROJECT_TYPE=$(jq -r '.projectType // "unknown"' "$PROJECT_JSON_PATH")
              PROJECT_TAGS=$(jq -r '.tags // [] | .[]' "$PROJECT_JSON_PATH" | tr '\n' ' ') # Get tags as space-separated string

              # Example Logic: Project is publishable if it's a 'library' or has a 'publishable' tag.
              if [[ "$PROJECT_TYPE" == "library" || "$PROJECT_TAGS" =~ "publishable" ]]; then
                if [[ -z "$publishable_projects" ]]; then
                  publishable_projects="$project"
                else
                  publishable_projects="$publishable_projects,$project"
                fi
              else
                echo "Project $project (type: $PROJECT_TYPE, tags: $PROJECT_TAGS) is not identified as publishable."
              fi
            else
              echo "Project $project does not have a 'build' target. Skipping publishability check."
            fi
          done

          if [[ -z "$publishable_projects" ]]; then
            echo "No publishable projects found with changes. Skipping release."
            echo "should_release=false" >> $GITHUB_OUTPUT
          else
            echo "Found publishable projects to consider for release: $publishable_projects"
            echo "projects_to_release=$publishable_projects" >> $GITHUB_OUTPUT
            echo "should_release=true" >> $GITHUB_OUTPUT
          fi

      - name: Run Nx Release Version (to bump versions and create tags/commits)
        id: nx_version
        if: steps.determine_projects.outputs.should_release == 'true'
        run: |
          PROJECTS="${{ steps.determine_projects.outputs.projects_to_release }}"
          echo "Bumping versions for projects: $PROJECTS"

          # Using --yes to confirm actions, --git-tag and --git-commit are default but explicit
          # --git-push=false because we'll handle pushing tags and commits separately at the end
          nx release version --project="$PROJECTS" --yes --git-push=false

          LATEST_TAG=$(git tag --sort=-committerdate | head -n 1) # Heuristic for the latest tag created

          echo "Latest tag created by Nx: $LATEST_TAG"
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
          NPM_CONFIG_PROVENANCE: true

      - name: Push new Git tags to GitHub
        if: steps.determine_projects.outputs.should_release == 'true' && steps.nx_version.outputs.latest_tag != ''
        run: |
          LATEST_TAG="${{ steps.nx_version.outputs.latest_tag }}"

          # Push the specific tag created by nx release version
          echo "Pushing tag $LATEST_TAG to remote."
          git push origin "$LATEST_TAG" || { echo "Failed to push tag $LATEST_TAG. Continuing."; }

          # Ensure all other new local tags (e.g., if multiple projects got individual tags) are pushed.
          git push --follow-tags || { echo "Failed to push remaining tags. Continuing."; }

      - name: Verify npmjs presence and handle conflicts
        id: npm_check
        if: steps.determine_projects.outputs.should_release == 'true'
        run: |
          PROJECTS="${{ steps.determine_projects.outputs.projects_to_release }}"
          NEEDS_REBUMP=""
          PUBLISH_CANDIDATES=""

          IFS=',' read -ra ADDR <<< "$PROJECTS"
          for project in "${ADDR[@]}"; do
            PACKAGE_PATH=$(find . -name "package.json" -path "*/$project/*" | head -n 1)
            if [[ -z "$PACKAGE_PATH" ]]; then
              echo "Warning: package.json not found for project $project. Skipping npm check."
              continue
            fi

            PACKAGE_VERSION=$(jq -r .version "$PACKAGE_PATH")
            PACKAGE_NAME=$(jq -r .name "$PACKAGE_PATH")
            FULL_TAG="${PACKAGE_NAME}@${PACKAGE_VERSION}"

            echo "Checking $FULL_TAG on npmjs..."

            NPM_VERSIONS=$(npm view "$PACKAGE_NAME" versions --json 2>/dev/null || echo "[]")

            if echo "$NPM_VERSIONS" | jq -e ".[] == \"$PACKAGE_VERSION\"" > /dev/null; then
              echo "Conflict: $FULL_TAG already exists on npmjs. This project will NOT be published."
              NEEDS_REBUMP="$NEEDS_REBUMP,$project"
            else
              echo "âœ… $FULL_TAG is unique for npmjs."
              if [[ -z "$PUBLISH_CANDIDATES" ]]; then
                PUBLISH_CANDIDATES="$project"
              else
                PUBLISH_CANDIDATES="$PUBLISH_CANDIDATES,$project"
              fi
            fi
          done

          if [[ -n "$NEEDS_REBUMP" ]]; then
            echo "::error::Detected npmjs version conflicts for projects: ${NEEDS_REBUMP#,}."
            echo "These projects were identified as having versions that already exist on npmjs. They will not be published in this run."
            echo "A manual version bump for these projects is required to release new versions."
          fi

          echo "publishable_projects_after_npm_check=$PUBLISH_CANDIDATES" >> $GITHUB_OUTPUT

      - name: Run Nx Release Publish
        if: steps.determine_projects.outputs.should_release == 'true' && steps.npm_check.outputs.publishable_projects_after_npm_check != ''
        run: |
          PROJECTS_TO_PUBLISH="${{ steps.npm_check.outputs.publishable_projects_after_npm_check }}"
          echo "Publishing projects to npmjs: $PROJECTS_TO_PUBLISH"
          nx release publish --projects="$PROJECTS_TO_PUBLISH" --yes
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
          NPM_CONFIG_PROVENANCE: true

      - name: Push Git commits to main
        if: steps.determine_projects.outputs.should_release == 'true'
        run: |
          git push origin main
